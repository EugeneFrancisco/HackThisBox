#====================================================================
#Main.py with example code for temp and humid sensors and file data
#Eugene Francisco
#===================================================================

# GROWING BEYOND EARTH CONTROL BOX 
# RASPBERRY PI PICO / MICROPYTHON

# FAIRCHILD TROPICAL BOTANIC GARDEN, OCTOBER 20, 2021

# The Growing Beyond Earth (GBE) control box is a device that controls
# the LED lights and fan in a GBE growth chamber. It can also control
# accessories including a 12v water pump and environmental sensors. 
# The device is based on a Raspberry Pi Pico microcontroller running 
# Micropython.

# This program (main.py) runs automatically each time the device is
# powered up.



# ----------------SETTINGS FOR LIGHTS AND FAN-------------------

# LIGHTS -- Time values are hh:mm strings based on a 24h clock;  
#           brightness values are integers from 0 to 255 that set the
#           PWM duty cycle

#time values in file are in form [(year, month, day, mysteriousNumber, hour, minutes, seconds, mysteriousZero)]
lights_on_time = "7:00"
lights_off_time = "19:20"

red_brightness = 72
green_brightness = 60
blue_brightness = 44
white_brightness = 52


# FAN -- Fan power is an integer from 0 to 255 that sets the PWM
#        duty cycle

fan_power_when_lights_on = 255
fan_power_when_lights_off = 128

# --------------------------------------------------------------


# -----------------Load required libraries from /lib/-----------

import os#works
from sys import stdin, stdout, exit
import machine
from machine import Pin, PWM, I2C
import utime, time
from time import sleep
from ds3231 import DS3231  # Hardware (I2C) real time clock
import ina219              # Current sensor
import ahtx0
from stemma_soil_sensor import StemmaSoilSensor
import adafruit_scd4x

# --------------Read unique ID of Raspberry Pi Pico-------------
board_id=""
raw_id = machine.unique_id()
for bval in raw_id : board_id += str((hex(bval)[2:]))



# ----------------Set up status LED on Control Box--------------
led = machine.PWM(machine.Pin(6))
led.freq(1000)
#-----------------Set up pump pins---------------------

pump = Pin(7, Pin.OUT) #pump
SDA_PIN = 18 # Define Pins
SCL_PIN = 19 # Define Pins
i2c = machine.I2C(1,sda=machine.Pin(SDA_PIN), scl=machine.Pin(SCL_PIN), freq=400000)


# -------Set up I2C bus 0 for devices inside the control box---

i2c0 = machine.I2C(0, sda=machine.Pin(16), scl=machine.Pin(17))
ina = ina219.INA219(0.1,i2c0)   # Current sensor


# -------------Set up real time clock on I2C bus 0--------------
rtc = DS3231(i2c0) # Read Time from I2C RTC
rtc_time_tuple = rtc.DateTime() # Create a tuple with Time from I2C RTC
rtci = machine.RTC()
rtci.datetime([x for x in rtc_time_tuple] + [0]) # Set local Machine time from I2C RTC and add a 0 at the end.
loghour = rtci.datetime()[4] # Set a variable for hourly logging 

# Translate the specified on/off times to seconds since midnight

onh, onm = map(int, lights_on_time.split(':')); on_seconds = (onh*60 + onm) * 60
offh, offm = map(int, lights_off_time.split(':')); off_seconds = (offh*60 + offm) * 60


# ---------------Set up LED and fan control--------------------
# Connect 24v MOSFETs to PWM channels on GPIO Pins 0-4
# Set PWM frequency on all channels

r=machine.PWM(machine.Pin(0)); r.freq(20000)   # Red channel
b=machine.PWM(machine.Pin(1)); b.freq(20000)   # Blue channel
g=machine.PWM(machine.Pin(2)); g.freq(20000)   # Green channel
w=machine.PWM(machine.Pin(3)); w.freq(20000)   # White channel
f=machine.PWM(machine.Pin(4)); f.freq(20000)   # Fan

# Clean up lights in case of a previous crash
r.duty_u16(0)
g.duty_u16(0)
b.duty_u16(0)
w.duty_u16(0)

# Initialize variables for counting fan RPMs
counter = 0
prev_ms = 0

# ----------------------Set up Functions -----------------------
def Truncate(self, Num):
    with open("controle.txt","r") as FText: # controle.txt is the file to truncate
        lines = FText.readlines() # Read the content of the file
    with open("controle.txt","w") as FText: # Create a new empty file controle.txt
        for i in range(0,Num):
            try:
                FText.write(lines[i]) # Paste one line by one line until Num
            except:
                pass
def getRTC():
    # Attempt to read the time from the internal real time clock and
    # catch any errors
    try:
       rtc_dt=rtci.datetime()
       #Debug RTC
    except Exception as e:
      print("An exception has occurred with the RTC: ", e)
     
    rtc_seconds = ((((rtc_dt[4])*60) + rtc_dt[5]) * 60) + rtc_dt[6]
    rtc_ms = time.ticks_ms()

    return rtc_dt, rtc_seconds, rtc_ms

def controlLightsAndFan():
    if rtc_seconds >= on_seconds and rtc_seconds < off_seconds:
        # Lights on
        r.duty_u16(int(min(200,red_brightness))*256)   # Maximum brightness = 200
        g.duty_u16(int(min(89,green_brightness))*256)  # Maximum brightness = 89
        b.duty_u16(int(min(94,blue_brightness))*256)   # Maximum brightness = 94
        w.duty_u16(int(min(146,white_brightness))*256) # Maximum brightness = 146
        f.duty_u16(int(min(255,fan_power_when_lights_on)) * 256) # Maximum fan power = 255
    else:
        # Lights off
        r.duty_u16(0)
        g.duty_u16(0)
        b.duty_u16(0)
        w.duty_u16(0)
        f.duty_u16(int(min(255,fan_power_when_lights_off)) * 256)

def pwmLED():
	try:
	   for duty in range(45000): led.duty_u16(duty); time.sleep(0.0001)
	   for duty in range(45000, 0, -1): led.duty_u16(duty); time.sleep(0.0001)
	

	except Exception as e:
	  print("An exception has occurred with the LED: ", e)
def currentSensor():     
	try:
	   ina.configure()
	   print("Voltage/current/power sensor readings:")
	   print("     Bus Voltage: %.3f V" % ina.voltage())
	   print("     Current: %.3f mA" % ina.current())
	   print("     Power: %.3f mW" % ina.power())
	
	except:
		print("Error reading from the current sensor", e)

def pump_on(): #turn the pump on
    pump.value(1)
    time.sleep(5) #how long should the pump run
    print("Pump On - Watering the Plant")
def pump_off(): #turn the pump off
    pump.value(0)
    print("Pump Off - Stop Watering the Plant")

#===========================================================================================
#Example of Temp and Humid info, Eugene Francisco{
#===========================================================================================
def findTH(): #returns temperature in C and F and humidity in array [tempC,tempF,humidity]
    try:
        # I2C for
        i2c = I2C(1,scl=Pin(19), sda=Pin(18))
        # Create the sensor object using I2C
        sensor = ahtx0.AHT10(i2c)

        Ctemp=sensor.temperature #finds tempearture from sensor
        Ftemp=(Ctemp*1.8+32) #converts to farenheight under new variable "Ftemp"
        humidity=sensor.relative_humidity #finds humidity level
        dataArr = [0,0,0] #array to save temp in celsius, farenheight, and humidity
        dataArr[0] = Ctemp #first element of arr is C
        dataArr[1] = Ftemp #second element of arr is F
        dataArr[2] = humidity #third element of arr is humidity
        return dataArr #returns list in form [Ctemp, Ftemp, humidity]

    except: #if doesn't work, returns error message and continues the program
        print("Error with current sensor", e) #"e" returns specific error message from program
        
def findTM():#finds temperature and moisture and returns it in array [tempC,tempF,moisture]
    SDA_PIN = 18 # update this
    SCL_PIN = 19 # update this
    #i2c0 = machine.I2C(0, sda=machine.Pin(16), scl=machine.Pin(17))
    
    i2c = machine.I2C(1,sda=machine.Pin(SDA_PIN), scl=machine.Pin(SCL_PIN), freq=400000)
    seesaw = StemmaSoilSensor(i2c)

    # get moisture
    moisture = seesaw.get_moisture()
    # get temperature
    temperature = seesaw.get_temp()
    ftemperature=(temperature*1.8+32)
    tmArr = []#array of temperature and moisture
    tmArr.append(temperature)
    tmArr.append(ftemperature)
    tmArr.append(moisture)
    return tmArr#final array in form [temp,tempF,moisture]
    
def saveTimeTempHumidMoisture(time, tempC, tempF, humid, moisture):# saves all data in file
    file = open("Data.txt", "a")#creates file called "Data.txt" if it hasn't been created, or opens it if it has. "a" opens the file for appending
    file.write(str(time) + " " + str(tempC) + " " + str(tempF) + " " + str(humid) + " " + str(moisture)) #appends data in form (timeInfo, Ctemp, Ftemp, humidity)
    file.close()
    with open("Data.txt") as file: #opens Data.txt file to read
        readData = file.read() #reads file data to "realData" 
    print(readData)
    file.close()

def waterControl(moistureThreshold):#turns pump on if moisture level is above a certain threshold
    moisture = findTM()[2]
    if moisture > moistureThreshold:
        pump_on()
        sleep(2)#regardless what happens outside, the pump shuts off after 2 seconds.
        pump_off()
                
def checkSensor():#checks which sensors are connected. Returns [{condition of both sensors},{condition of moisture sensor},{condition of humidity sensor}]
    try:
        findTM()
        moisture = True #if sensor is able to read the mositure, variable called "moisture" defined as True
    except:
        moisture = False # otherwise False
    try:
        findTH()
        humidity = True#if sensor is able to read the humidity, variable called "humid" defined as True
    except:
        humidity = False#otherwise False
    return moisture, humidity#return array of condition of both sensors

def checkCO2():#Needs a lot of work done! 
    i2c = machine.I2C(1)
    scd4x = adafruit_scd4x.SCD4X(i2c)
    scd4x.start_periodic_measurement()
    if scd4x.data_ready:
        print("CO2: %d ppm" % scd4x.CO2)
        print("Temperature: %0.1f *C" % scd4x.temperature)
        print("Humidity: %0.1f %%" % scd4x.relative_humidity)
        time.sleep(1)
#============================== Updated Main =================================
def printStatus():
    try:
        print(board_id + "  " 
              + str(rtc_dt[0]) + "-"
              + str("%02d" % rtc_dt[1]) + "-"
              + str("%02d" % rtc_dt[2])
              + " " + str("%02d" % rtc_dt[4]) + ":"
              + str("%02d" % rtc_dt[5]) + ":"
              + str("%02d" % rtc_dt[6])
              + "  " + str("%3.f" % (r.duty_u16()/256))
              + " " + str("%3.f" % (g.duty_u16()/256))
              + " " + str("%3.f" % (b.duty_u16()/256))
              + " " + str("%3.f" % (w.duty_u16()/256)) + "  "
              + str("%5.2f" % ina.voltage()) + " "
              + str("%4.f" % ina.current()) + " "
              + str("%5.2f" % (ina.power()/1000)) + "  "
              + str("%3.f" % (f.duty_u16()/256)) + " "
              + str("%4.f" % (counter/(rtc_ms-prev_ms)*30000)))

    except Exception as e:
        print(rtc_ms)
        print(prev_ms)
        print("An exception has occurred with printStatus: ", e)
        
def currentSensor():     
    try:
       ina.configure()
    except:
        print("Error reading from the current sensor", e)

def GotIrq(pin):
    global counter
    counter += 1

#===================================================================
#}
#===================================================================
# ----------------------------Main Start----------------------------
# Print information at startup
print("\nGROWING BEYOND EARTH, FAIRCHILD TROPICAL BOTANIC GARDEN\n")
print ("Software release date:\n 2021-10-20\n")
print ("Internal clock time:")
print ("" + str(rtci.datetime()[0]) + "-" + str(rtci.datetime()[1]) + "-" + str(rtci.datetime()[2]) + "   " + str(rtci.datetime()[4]) + ":" + str(rtci.datetime()[5]) + ":" + str(rtci.datetime()[6]) + "\n") 
currentSensor()

p5 = Pin(5, Pin.IN, Pin.PULL_UP)
p5.irq(trigger=Pin.IRQ_FALLING, handler=GotIrq)
#================================================================== Main Loop =====================================================
os.remove("Data.txt")
data = open("Data.txt", "w")
while True:#Nov 13 update. Less code #Needs to show error messages under certain circumstances

    rtc_dt, rtc_seconds, rtc_ms = getRTC()
    controlLightsAndFan()
    timeArr = [rtc_dt, rtc_seconds]
    prev_ms = rtc_ms; counter = 0
    #printStatus()
    if loghour != rtc_dt[4]:
        rtc.DateTime(rtc_dt) # Set the I2C RTC to prevent drift
        loghour = rtc_dt[4]
    pwmLED()
    #except Exception as e:
    #    print("Failed Main Loop! Trying again: ", e)
    if checkSensor()[0] == True & checkSensor()[1] == True:
        saveTimeTempHumidMoisture(timeArr,findTM()[0], findTM()[1], findTH()[2], findTM()[2])
        waterControl(900)
    else:
        if checkSensor()[0] == True:
            saveTimeTempHumidMoisture(timeArr, findTM()[0], findTM()[1], "N/A", findTM()[2])
            waterControl(650)
            print(findTM()[2])
        if checkSensor()[1] == True:
            saveTimeTempHumidMoisture(timeArr, findTH()[0], findTH()[1], findTH()[2], "N/A")
    if checkSensor()[0] != True:
        if checkSensor()[1] != True:
            print("error reading both sensors, or not connected")
            print(checkSensor()[0])
    #checkCO2()
    sleep(2)
